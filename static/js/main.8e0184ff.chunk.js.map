{"version":3,"sources":["containers/App.module.css","components/Persons/Person/Person.module.css","hoc/withClass.js","hoc/Auxillary.js","context/auth-context.js","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","registerServiceWorker.js","index.js","components/Cockpit/Cockpit.module.css"],"names":["module","exports","withClass","WrappedComponent","className","props","aux","children","authContext","React","createContext","authenticated","login","Person","inputElementRef","createRef","this","current","focus","context","key","onClick","click","name","age","ref","type","onChange","changed","value","Component","contextType","AuthContext","classes","Persons","nextProps","nextState","console","log","persons","clicked","prevProps","prevState","map","person","index","id","event","memo","toggleButtonRef","useRef","useContext","useEffect","assignedClasses","btnClass","showPersons","Red","personsLength","push","red","bold","Cockpit","join","state","otherState","showCockpit","changeCounter","nameChangedHandler","personIndex","findIndex","p","target","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","loginHandler","Provider","showPerson","length","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","basename","process","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8e0184ff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2_l3Y\"};","import React from 'react';\n\nconst withClass = (WrappedComponent, className) => {\n    return props => (\n        <div className={className}>\n            <WrappedComponent {...props} />\n        </div>\n    );\n};\n\nexport default withClass;","const aux = props => props.children;\n\nexport default aux;","import React from 'react';\n\nconst authContext = React.createContext({\n    authenticated: false,\n    login: () => {}\n});\n\nexport default authContext;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Person.module.css';\nimport withClass from '../../../hoc/withClass';\nimport Aux from '../../../hoc/Auxillary';\nimport AuthContext from '../../../context/auth-context';\n\nclass Person extends Component {\n    constructor(props) {\n        super();\n        this.inputElementRef = React.createRef();\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount() {\n        // this.inputElement.focus();\n        this.inputElementRef.current.focus();\n    }\n\n    render() {\n        return (\n            <Aux>\n                {this.context.authenticated ? <p>Authenticated!</p> : <p>Please Log in.</p>}\n\n                <p key=\"i-1\" onClick={this.props.click}>I'm {this.props.name} and I am {this.props.age} years old!</p>\n                <p key=\"i-2\" >{this.props.children}</p>\n                <input \n                    key=\"i-3\" \n                    // ref={(inputEl) => {this.inputElement = inputEl}}\n                    ref={this.inputElementRef}\n                    type=\"text\" \n                    onChange={this.props.changed} \n                    value={this.props.name}\n                />\n            </Aux>\n        );    \n    }\n}\n\nPerson.propTypes = {\n    click: PropTypes.func,\n    name: PropTypes.string,\n    age: PropTypes.number,\n    change: PropTypes.func\n};\n\nexport default withClass(Person, classes.Person);","import React, { Component } from 'react';\nimport Person from \"./Person/Person\";\n\n\nclass Persons extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('[Persons.js] shouldComponentUpdate');\n        if (\n            nextProps.persons !== this.props.persons || \n            nextProps.changed !== this.props.changed || \n            nextProps.clicked !== this.props.clicked \n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log('[Persons.js] getSnapshotBeforeUpdate');\n        return null;\n    }\n\n    componentDidUpdate() {\n        console.log('[Persons.js] componentDidUpdate');\n    }\n\n    componentDidMount() {\n        console.log('[Persons.js] componentDidMount');\n    }\n\n    render() {\n        return this.props.persons.map((person, index) => {\n            return (\n                <Person\n                    name={person.name}\n                    age={person.age}\n                    click={() => this.props.clicked(index)}\n                    key={person.id}\n                    changed={(event) => this.props.changed(event, person.id)}\n                />\n            );\n        });   \n    }\n}\n\nexport default Persons;","import React, { useEffect, useRef, useContext } from 'react';\n\nimport classes from \"./Cockpit.module.css\";\nimport AuthContext from '../../context/auth-context';\n\nconst Cockpit = (props) => {\n    const toggleButtonRef = useRef(null);\n    const authContext = useContext(AuthContext);\n\n    useEffect(() => {\n        console.log('[Cockpit.js] useEffect');\n        // HTTP requests...\n        // setTimeout(() => {\n        //     alert('Saved data to cloud!')\n        // }, 1000);\n        toggleButtonRef.current.click();\n        return () => {\n            console.log('[Cockpit.js] cleanup work in useEffect');\n        };\n    }, []);\n\n    useEffect(() => {\n        console.log('[Cockpit.js] 2nd useEffect');\n        return () => {\n            console.log('[Cockpit.js] cleanup work in useEffect');\n        };\n    });\n\n    const assignedClasses = [];\n    let btnClass = '';\n    if(props.showPersons) {\n        btnClass = classes.Red;\n    }\n\n    if(props.personsLength <= 2) {\n        assignedClasses.push(classes.red); // at this point classes will be red\n    }\n    if(props.personsLength <= 1) {\n        assignedClasses.push(classes.bold); // at this point classes are red and bold\n    }\n\n    return (\n        <div className={classes.Cockpit}>\n            <h1>Hi I'm a React App!</h1>\n            <p className={assignedClasses.join(' ')}>This is really working.</p>\n            <button\n                ref={toggleButtonRef}\n                className={btnClass}\n                onClick={props.clicked}>\n                Toggle People\n            </button>\n            <button onClick={authContext.login}>Login</button>\n            \n        </div>\n    );\n};\n\nexport default React.memo(Cockpit);","import React, { Component } from 'react';\n\nimport classes from './App.module.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\nimport withClass from '../hoc/withClass';\nimport Aux from '../hoc/Auxillary';\nimport AuthContext from '../context/auth-context';\n\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: 'sdgad', name: 'Lawangin', age: 30 },\n      { id: 'kdlfn', name: 'Khan', age: 25 },\n      { id: 'aifje', name: 'Samsoor', age: 21}\n    ],\n    otherState: 'some other value',\n    showPersons: false,\n    showCockpit: true,\n    changeCounter: 0,\n    authenticated: false\n  };\n\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n    // alternative to above modern version\n    // const person = Object.assign({}, this.state.persons[personIndex])//\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n    persons[personIndex] = person;\n\n    this.setState((prevState, props) => {\n      return { \n        persons: persons,\n        changeCounter: prevState.changeCounter + 1\n      }\n    });\n  };\n\n  deletePersonHandler = (personIndex) => {\n    // const persons = this.state.persons.slice(); same as the modern version below\n    const persons = [...this.state.persons];\n    //removes person from array\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons});\n  };\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    //flips between true and false\n    this.setState({showPersons: !doesShow})\n  };\n\n  loginHandler = () => {\n    this.setState({ authenticated: true });\n  }\n\n  render() {\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n           <Persons\n               persons={this.state.persons}\n               clicked={this.deletePersonHandler}\n               changed={this.nameChangedHandler}\n           />\n      );\n\n    }\n\n\n\n    return (\n      <Aux>\n        <button onClick={() => { this.setState({ showCockpit: false })}}>Remove Cockpit</button>\n        <AuthContext.Provider value={{authenticated: this.state.authenticated, login: this.loginHandler}}>\n        {this.state.showCockpit ? (\n            <Cockpit\n            showPerson={this.state.showPersons}\n            personsLength={this.state.persons.length}\n            clicked={this.togglePersonsHandler}\n            />\n        ) : null}\n\n        {persons}\n        </AuthContext.Provider>\n       \n      </Aux>\n    );\n  }\n}\n\nexport default withClass(App, classes.App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter basename={process.env.PUBLIC_URL}><App /></BrowserRouter>, document.getElementById('root'));\nregisterServiceWorker();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"red\":\"Cockpit_red__3GSoJ\",\"bold\":\"Cockpit_bold__3urf2\",\"Cockpit\":\"Cockpit_Cockpit__snX-D\",\"Red\":\"Cockpit_Red__2ee36\"};"],"sourceRoot":""}